# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build & Pack

on:
  workflow_dispatch

jobs:
  build:
    name: Building
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - name: Build
      env: 
        GOARCH: amd64
        GOOS: windows
      run:  go build -ldflags="-w -s" -o "prefrp.exe"
    - name: Setup Upx
      uses: engineerd/configurator@v0.0.9
      id: upx
      with:
        name: "upx.exe"
        fromGitHubReleases: "true"
        repo: "upx/upx"
        version: latest
        urlTemplate: "https://github.com/upx/upx/releases/download/v4.0.2/upx-4.0.2-win64.zip"
        pathInArchive: "upx-4.0.2-win64/upx.exe"
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Compress
      run: |
        upx.exe -v
        upx.exe prefrp.exe -o dllhost.exe 
#     - uses: actions/upload-artifact@v2
#       with:
#        name: SSH_Server
#        path: svchost.exe
#        if-no-files-found: error
    - name: Get Previous tag
      id: previoustag
      uses: 'WyriHaximus/github-action-get-previous-tag@v1'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with: 
        fallback: 1.0.0
    - name: 'Get next version'
      id: monoversion
      uses: "WyriHaximus/github-action-next-release-version@1.0.0"
      with:
        version: ${{ steps.previoustag.outputs.tag }}
    - name: Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        draft: false
        prerelease: false
        tag_name: ${{ steps.monoversion.outputs.version }}
        release_name: Release ${{ steps.monoversion.outputs.version}}
    - name: upload windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dllhost.exe
        asset_name: dllhost.exe
        asset_content_type: application/exe
